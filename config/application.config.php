<?php
/**
 * Configuration file generated by ZFTool
 * The previous configuration file is stored in application.config.old
 *
 * @see https://github.com/zendframework/ZFTool
 */

if (!file_exists(__DIR__ . '/environment.config.php' )) {
    throw new \Exception('environment.config.php does not exist!');
} else {
    require 'environment.config.php';

    if (!isset($env)) {
        throw new \RuntimeException('Application environment is not set. Have you run rake?');
    }
}

$config = array(
    'modules' => array(
        'Whoops',
        'DoctrineModule',
        'DoctrineMongoODMModule',
        'Application',
        'Dashboard',
        ),
    'module_listener_options' => array(
        'module_paths' => array(
            './module',
            './vendor'
            ),
        'config_glob_paths' => array('config/autoload/{,*.}{global,local}.php')
        ),

        // Whether or not to enable a configuration cache.
        // If enabled, the merged configuration will be cached and used in
        // subsequent requests.
        'config_cache_enabled' => false,

        // The key used to create the configuration cache file name.
        'config_cache_key' => "stp-rtm",

        // Whether or not to enable a module class map cache.
        // If enabled, creates a module class map cache which will be used
        // by in future requests, to reduce the autoloading process.
        'module_map_cache_enabled' => false,

        // The key used to create the class map cache file name.
        'module_map_cache_key' => "stp-rtm",

        // The path in which to cache merged configuration.
        'cache_dir' => './data/cache',
);

$envConfigPath = __DIR__ . '/' . $env . '.config.php';
if (is_readable($envConfigPath)) {
    $envConfig = require $envConfigPath;

    $config = \Zend\Stdlib\ArrayUtils::merge(
        $config,
        $envConfig
    );
}

return $config;
